package com.ut.scf.service.tradfact.impl;

import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.ut.scf.core.dict.ErrorCodeEnum;
import com.ut.scf.core.dict.PageInfoBean;
import com.ut.scf.core.util.BeanUtil;
import com.ut.scf.dao.auto.TfProjectInfoMapper;
import com.ut.scf.dao.auto.TfUpwardsInfoMapper;
import com.ut.scf.dao.tradfact.IRecomMeetDao;
import com.ut.scf.pojo.auto.TfProjectInfo;
import com.ut.scf.reqbean.tradfact.RecomMeetingAddReqBean;
import com.ut.scf.respbean.BaseRespBean;
import com.ut.scf.respbean.PageRespBean;
import com.ut.scf.service.tradfact.IRecomMeetService;

@Service
public class RecomMeetServiceImpl implements IRecomMeetService {
	private static final Logger log = LoggerFactory
			.getLogger(RecomMeetServiceImpl.class);
	@Resource private IRecomMeetDao recomMeetDao;
	@Resource private TfUpwardsInfoMapper upwardsInfoMapper;
	@Resource private TfProjectInfoMapper tfProjectInfoMapper;
	@Override
	@Transactional(readOnly = true)
	public BaseRespBean searchMeetInfo(Map<String, Object> paramMap, PageInfoBean page) {
		List<Map<String, Object>> list = recomMeetDao.selectProjectInfo(paramMap, page);
		PageRespBean respBean = new PageRespBean();
		respBean.setPages(page.getTotalPage());
		respBean.setRecords(page.getTotalRecord());
		log.debug("推荐上会TotalPage:"+page.getTotalPage()+"TotalRecord:"+page.getTotalRecord());
		log.debug("推荐上会list:"+list);
		respBean.setDataList(list);
		return respBean;
	}
	
	@Override
	@Transactional(propagation = Propagation.REQUIRED)
	public BaseRespBean interMeetInfo(RecomMeetingAddReqBean ReqBean) {
		BaseRespBean respBean = new BaseRespBean();
		
		com.ut.scf.pojo.auto.TfUpwardsInfo upwardsReq = new com.ut.scf.pojo.auto.TfUpwardsInfo();
		BeanUtil.BeanToBean(upwardsReq, ReqBean);
		upwardsReq.setCreateTime(new Date());
		int upwardsInsertNum = upwardsInfoMapper.insert(upwardsReq);
		if (upwardsInsertNum <= 0) {
			respBean.setResult(ErrorCodeEnum.ADD_FAILED);
			return respBean;
		}
		
		TfProjectInfo tfProjectInfo = new TfProjectInfo();
		tfProjectInfo.setProjectId(ReqBean.getProjectId());
		tfProjectInfo.setProjectStatus("41");
		tfProjectInfoMapper.updateByPrimaryKeySelective(tfProjectInfo);
		return respBean;
	}

	@Override
	@Transactional(readOnly = true)
	public BaseRespBean searchMeetInfo(Map<String, Object> paramMap) {
		List<Map<String, Object>> list = recomMeetDao.selectProjectInfo(paramMap);
		PageRespBean respBean = new PageRespBean();
		respBean.setDataList(list);
		return respBean;
		
		
		
	}

}
