package com.ut.scf.web.controller.query;

import java.io.File;
import java.util.Date;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ut.scf.core.dict.ErrorCodeEnum;
import com.ut.scf.core.dict.PageInfoBean;
import com.ut.scf.core.dict.ScfConsts;
import com.ut.scf.core.util.BeanUtil;
import com.ut.scf.core.util.ScfDateUtil;
import com.ut.scf.reqbean.query.GuaranteeHistoryQueryReqBean;
import com.ut.scf.reqbean.query.GuaranteeQueryReqBean;
import com.ut.scf.reqbean.query.GuaranteeThQueryReqBean;
import com.ut.scf.respbean.BaseRespBean;
import com.ut.scf.service.query.IGuaranteeQueryService;

@Controller
@RequestMapping("/guaranteeQuery")
public class GuaranteeQueryController {

	private static final Logger log = LoggerFactory.getLogger(GuaranteeQueryController.class);

	@Resource
	private IGuaranteeQueryService guaranteeQueryService;

	@RequestMapping(value = "/list")
	@ResponseBody
	public BaseRespBean getGuaranteeQueryList(HttpSession httpSession, @RequestBody GuaranteeQueryReqBean reqBean,
			BindingResult bindingResult) {
		BaseRespBean respBean = new BaseRespBean();
		Map<String, Object> paramMap = BeanUtil.beanToMap(reqBean);

		// 获取当前用户
		String corpId = (String) httpSession.getAttribute(ScfConsts.SESSION_CORP_ID);
		if ("corp00001".equals(corpId)) {// 悦达

		} else if ("corp00002".equals(corpId)) {// dyk
			paramMap.put("sysType", 4);
			paramMap.put("corpId", corpId);
		} else if ("corp00003".equals(corpId)) {//
			paramMap.put("sysType", 6);
		} else {
			paramMap.put("corpId", corpId);
		}

		PageInfoBean page = new PageInfoBean();
		page.setPageNumber(reqBean.getPageNumber());
		page.setPageSize(reqBean.getPageSize());
		respBean = guaranteeQueryService.getGuaranteeQueryList(paramMap, page);
		log.debug("getGuaranteeQueryList: {}", respBean);

		return respBean;
	}
	/*-----------------------------保证金最新需求------------------------------*/
	@RequestMapping(value = "/listNewHistory", method = RequestMethod.POST, consumes = { "application/json" }, produces = {
			"application/json;charset=UTF-8" })
	public @ResponseBody BaseRespBean getGuaranteeHistoryList(HttpSession httpSession,
			@RequestBody GuaranteeHistoryQueryReqBean reqBean, BindingResult bindingResult) {
		BaseRespBean respBean = new BaseRespBean();
		if (bindingResult.hasErrors()) {
			log.warn("bindingResult has error");
			respBean.setResult(ErrorCodeEnum.PARAM_VALID_ERROR);
			respBean.setResultErrorMap(bindingResult);
			return respBean;
		}

		Map<String, Object> paramMap = BeanUtil.beanToMap(reqBean);
		// 获取当前用户
		String corpId = (String) httpSession.getAttribute(ScfConsts.SESSION_CORP_ID);
		if ("corp00001".equals(corpId)) {// 悦达

		} else if ("corp00002".equals(corpId)) {// dyk
			paramMap.put("sysType", 4);
		} else if ("corp00003".equals(corpId)) {// 分期超人
			paramMap.put("sysType", 6);
		} else {
			paramMap.put("corpId", corpId);
		}

		PageInfoBean page = new PageInfoBean();
		page.setPageNumber(reqBean.getPageNumber());
		page.setPageSize(reqBean.getPageSize());
		respBean = guaranteeQueryService.getGuaranteeHistoryList(paramMap, page);

		return respBean;
	}
	
	
	/*-----------------------------保证金最新需求------------------------------*/
	@RequestMapping(value = "/fqcrListNewHistory", method = RequestMethod.POST, consumes = { "application/json" }, produces = {
			"application/json;charset=UTF-8" })
	public @ResponseBody BaseRespBean getFqcrGuaranteeHistoryList(HttpSession httpSession,
			@RequestBody GuaranteeHistoryQueryReqBean reqBean, BindingResult bindingResult) {
		BaseRespBean respBean = new BaseRespBean();
		if (bindingResult.hasErrors()) {
			log.warn("bindingResult has error");
			respBean.setResult(ErrorCodeEnum.PARAM_VALID_ERROR);
			respBean.setResultErrorMap(bindingResult);
			return respBean;
		}

		Map<String, Object> paramMap = BeanUtil.beanToMap(reqBean);
		// 获取当前用户

		PageInfoBean page = new PageInfoBean();
		page.setPageNumber(reqBean.getPageNumber());
		page.setPageSize(reqBean.getPageSize());
		respBean = guaranteeQueryService.getFqcrGuaranteeHistoryList(paramMap, page);

		return respBean;
	}
	
	
	@RequestMapping(value = "/listNewHistoryInsert", method = RequestMethod.POST, consumes = {
			"application/json" }, produces = { "application/json;charset=UTF-8" })
	public @ResponseBody BaseRespBean getGuaranteeHistoryInsertList(HttpSession httpSession,
			@RequestBody GuaranteeHistoryQueryReqBean reqBean, BindingResult bindingResult) {
		BaseRespBean respBean = new BaseRespBean();
		if (bindingResult.hasErrors()) {
			log.warn("bindingResult has error");
			respBean.setResult(ErrorCodeEnum.PARAM_VALID_ERROR);
			respBean.setResultErrorMap(bindingResult);
			return respBean;
		}
		//更新保证金缴纳历史
		respBean = guaranteeQueryService.getGuaranteeHistoryInsert(reqBean);
	

		return respBean;
	}
	
	
	@RequestMapping(value = "/fqcrListNewHistoryInsert", method = RequestMethod.POST, consumes = {
	"application/json" }, produces = { "application/json;charset=UTF-8" })
	public @ResponseBody BaseRespBean getfqcrGuaranteeHistoryInsertList(HttpSession httpSession,
		@RequestBody GuaranteeHistoryQueryReqBean reqBean, BindingResult bindingResult) {
	BaseRespBean respBean = new BaseRespBean();
	if (bindingResult.hasErrors()) {
		log.warn("bindingResult has error");
		respBean.setResult(ErrorCodeEnum.PARAM_VALID_ERROR);
		respBean.setResultErrorMap(bindingResult);
		return respBean;
	}
	//更新保证金缴纳历史
	respBean = guaranteeQueryService.getfqcrGuaranteeHistoryInsert(reqBean);
	
	
	return respBean;
	}
	
	/*-----------------------------查询统计新需求------------------------------*/
	@RequestMapping(value = "/listNew", method = RequestMethod.POST, consumes = { "application/json" }, produces = {
			"application/json;charset=UTF-8" })
	public @ResponseBody BaseRespBean getGuaranteeList(HttpSession httpSession,
			@RequestBody GuaranteeQueryReqBean reqBean, BindingResult bindingResult) {
		BaseRespBean respBean = new BaseRespBean();
		if (bindingResult.hasErrors()) {
			log.warn("bindingResult has error");
			respBean.setResult(ErrorCodeEnum.PARAM_VALID_ERROR);
			respBean.setResultErrorMap(bindingResult);
			return respBean;
		}

		Map<String, Object> paramMap = BeanUtil.beanToMap(reqBean);
		// 获取当前用户
		String corpId = (String) httpSession.getAttribute(ScfConsts.SESSION_CORP_ID);
		if ("corp00001".equals(corpId)) {// 悦达

		} else if ("corp00002".equals(corpId)) {// dyk
			paramMap.put("sysType", 4);
		} else if ("corp00003".equals(corpId)) {// 分期超人
			paramMap.put("sysType", 6);
		} else {
			paramMap.put("corpId", corpId);
		}

		PageInfoBean page = new PageInfoBean();
		page.setPageNumber(reqBean.getPageNumber());
		page.setPageSize(reqBean.getPageSize());
		respBean = guaranteeQueryService.getGuaranteeList(paramMap, page);

		return respBean;
	}

	
	/*-----------------------------查询统计新需求------------------------------*/
	@RequestMapping(value = "/listNewFqcr", method = RequestMethod.POST, consumes = { "application/json" }, produces = {
			"application/json;charset=UTF-8" })
	public @ResponseBody BaseRespBean getFqcrGuaranteeList(HttpSession httpSession,
			@RequestBody GuaranteeQueryReqBean reqBean, BindingResult bindingResult) {
		BaseRespBean respBean = new BaseRespBean();
		if (bindingResult.hasErrors()) {
			log.warn("bindingResult has error");
			respBean.setResult(ErrorCodeEnum.PARAM_VALID_ERROR);
			respBean.setResultErrorMap(bindingResult);
			return respBean;
		}

		Map<String, Object> paramMap = BeanUtil.beanToMap(reqBean);
		// 获取当前用户
		PageInfoBean page = new PageInfoBean();
		page.setPageNumber(reqBean.getPageNumber());
		page.setPageSize(reqBean.getPageSize());
		respBean = guaranteeQueryService.getFqcrGuaranteeList(paramMap, page);

		return respBean;
	}
	/*-----------------------------查询统计新需求------------------------------*/
	@RequestMapping(value = "/listNewFqcrTh", method = RequestMethod.POST, consumes = { "application/json" }, produces = {
			"application/json;charset=UTF-8" })
	public @ResponseBody BaseRespBean getFqcrGuaranteeThList(HttpSession httpSession,
			@RequestBody GuaranteeThQueryReqBean reqBean, BindingResult bindingResult) {
		BaseRespBean respBean = new BaseRespBean();
		if (bindingResult.hasErrors()) {
			log.warn("bindingResult has error");
			respBean.setResult(ErrorCodeEnum.PARAM_VALID_ERROR);
			respBean.setResultErrorMap(bindingResult);
			return respBean;
		}

		Map<String, Object> paramMap = BeanUtil.beanToMap(reqBean);
		// 获取当前用户
		PageInfoBean page = new PageInfoBean();
		page.setPageNumber(reqBean.getPageNumber());
		page.setPageSize(reqBean.getPageSize());
		respBean = guaranteeQueryService.getFqcrGuaranteeThList(paramMap, page);

		return respBean;
	}
	/*-----------------------------查询统计新需求------------------------------*/
	@RequestMapping(value = "/listNewFqcrThAdd", method = RequestMethod.POST, consumes = { "application/json" }, produces = {
			"application/json;charset=UTF-8" })
	public @ResponseBody BaseRespBean getFqcrGuaranteeThAddList(HttpSession httpSession,
			@RequestBody GuaranteeThQueryReqBean reqBean, BindingResult bindingResult) {
		BaseRespBean respBean = new BaseRespBean();
		if (bindingResult.hasErrors()) {
			log.warn("bindingResult has error");
			respBean.setResult(ErrorCodeEnum.PARAM_VALID_ERROR);
			respBean.setResultErrorMap(bindingResult);
			return respBean;
		}
		if(reqBean.getCashdateTo()==null||reqBean.getCashdateTo()=="")
		{
			return respBean;
			}
		Map<String, Object> paramMap = BeanUtil.beanToMap(reqBean);
		// 获取当前用户
		PageInfoBean page = new PageInfoBean();
		page.setPageNumber(reqBean.getPageNumber());
		page.setPageSize(reqBean.getPageSize());
		respBean = guaranteeQueryService.getFqcrGuaranteeThAddList(paramMap, page);

		return respBean;
	}
	
	/*-----------------------------查询统计新需求------------------------------*/
	@RequestMapping(value = "/replaymmentPlanGuar", method = RequestMethod.POST, consumes = { "application/json" }, produces = {
			"application/json;charset=UTF-8" })
	public @ResponseBody BaseRespBean getReplaymmentPlanGuar(HttpSession httpSession,
			@RequestBody GuaranteeThQueryReqBean reqBean, BindingResult bindingResult) {
		BaseRespBean respBean = new BaseRespBean();

		Map<String, Object> paramMap = BeanUtil.beanToMap(reqBean);
		// 获取当前用户
		PageInfoBean page = new PageInfoBean();
		page.setPageNumber(reqBean.getPageNumber());
		page.setPageSize(reqBean.getPageSize());
		respBean = guaranteeQueryService.getFqcrGuaranteeThAddThList(paramMap, page);

		return respBean;
	}
	
	/*-----------------------------查询统计新需求------------------------------*/
	@RequestMapping(value = "/listNewFqcrThAddInsert", method = RequestMethod.POST, consumes = { "application/json" }, produces = {
			"application/json;charset=UTF-8" })
	public @ResponseBody BaseRespBean getFqcrGuaranteeThAddListInsert(HttpSession httpSession,
			@RequestBody GuaranteeThQueryReqBean reqBean, BindingResult bindingResult) {
		BaseRespBean respBean = new BaseRespBean();
	


		respBean = guaranteeQueryService.getFqcrGuaranteeThAddListInsert(reqBean);

		return respBean;
	}
	
	
	@RequestMapping(value = "/exportExcel")
	@ResponseBody
	public String exportExcel(HttpSession httpSession, @RequestBody GuaranteeQueryReqBean reqBean,
			HttpServletRequest request) {
		try {

			String signPath = "/exportExcel/BZJ-" + ScfDateUtil.format(new Date(), "yyyyMMddhhmmss") + ".xls";
			String path = request.getSession().getServletContext().getRealPath(signPath);

			File tempFile = new File(path);
			File fileParent = tempFile.getParentFile();
			if (!fileParent.exists()) {
				fileParent.mkdirs();
			}

			Map<String, Object> paramMap = BeanUtil.beanToMap(reqBean);
			String corpId = (String) httpSession.getAttribute(ScfConsts.SESSION_CORP_ID);
			if ("corp00001".equals(corpId)) {// 悦达

			} else if ("corp00002".equals(corpId)) {// dyk
				paramMap.put("sysType", 4);
			} else if ("corp00003".equals(corpId)) {// 分期超人
				paramMap.put("sysType", 6);
			} else {
				paramMap.put("corpId", corpId);
			}
			guaranteeQueryService.exportExcel(paramMap, path);
			return request.getContextPath() + signPath;
		} catch (Exception e) {
			e.printStackTrace();
			return "";
		}

	}

}
