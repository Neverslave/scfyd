package com.ut.scf.service.test.tradfact;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.StringUtils;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.alibaba.fastjson.JSONObject;
import com.ut.scf.core.util.BeanUtil;
import com.ut.scf.core.util.ScfDateUtil;
import com.ut.scf.core.util.ScfUUID;
import com.ut.scf.dao.auto.OrderInfoYiMapper;
import com.ut.scf.dao.project.ISignContractDao;
import com.ut.scf.dao.query.IFinanceRepayDao;
import com.ut.scf.pojo.auto.RepaymentPlanInfo;
import com.ut.scf.reqbean.statistics.SSMProjectSummaryListReqBean;
import com.ut.scf.respbean.BaseRespBean;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = {
        "classpath*:spring-mybatis-test.xml"})
public class DictionaryTest {
/*    @Autowired
    private IDictionaryService dictionaryService;
    @Resource
    private ITfProjectDao projectDao;

    @Test
    public void loadAllDictTest() {
        System.out.println("strat");
        BaseRespBean loadAllDict = dictionaryService.loadAllDict();
        System.out.println("loadAllDict:" + loadAllDict);
        System.out.println("end");
    }
*/
	@Autowired(required = false)
	private HttpSession session;

    @Resource
    private ISignContractDao signContractDao;
    @Resource
    private OrderInfoYiMapper orderInfoYiMapper;
	@Resource
	private IFinanceRepayDao financeRepayDao;
    public static double irr(double[] income) {
        return irr(income, 0.1D);
    }
 
    public static double irr(double[] values, double guess) {
        int maxIterationCount = 20;
        double absoluteAccuracy = 1.0E-007D;
 
        double x0 = guess;
 
        int i = 0;
        while (i < maxIterationCount) {
            double fValue = 0.0D;
            double fDerivative = 0.0D;
            for (int k = 0; k < values.length; k++) {
                fValue += values[k] / Math.pow(1.0D + x0, k);
                fDerivative += -k * values[k] / Math.pow(1.0D + x0, k + 1);
            }
            double x1 = x0 - fValue / fDerivative;
            if (Math.abs(x1 - x0) <= absoluteAccuracy) {
                return x1;
            }
            x0 = x1;
            i++;
        }
        return (0.0D / 0.0D);
    }
    private BigDecimal paymentCalc(int m, int n, BigDecimal r,
            BigDecimal principal) {
		BigDecimal top = r.divide(new BigDecimal(m), 10,
		BigDecimal.ROUND_HALF_UP);
		top = new BigDecimal(1).add(top);
		top = new BigDecimal(1).divide(top, 10, BigDecimal.ROUND_HALF_UP);
		BigDecimal resultTop = new BigDecimal(1).subtract(top);
		resultTop = resultTop.multiply(principal);
		BigDecimal resultBtm = top.pow(n);
		resultBtm = new BigDecimal(1).subtract(resultBtm);
		resultBtm = top.multiply(resultBtm);
		BigDecimal result = resultTop.divide(resultBtm, 2,
		BigDecimal.ROUND_HALF_UP);
		return result;
		}
    
  /* @Test
    public  void test() { 

   
        List<Map<String, String>> orderList =signContractDao.selectOrderCatch111();
    	operateOrderThread.setStatusList(orderList);
    	try {
			operateOrderThread.getRepaymentPlan(orderList);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    Thread thread2 = new Thread(operateOrderThread);
    thread2.start();
    }*/
    
/*    @Test
    public  void test() throws ParseException { 
    	ArrayList<String> refuse_order_id =new ArrayList<String> ();
    	refuse_order_id.add("220180809112417589158");
    	OrderCheckResult checkResult=new OrderCheckResult();		
		checkResult.setDate("2018-09-09");
		checkResult.setBatch_id("377");
		checkResult.setRefuse_order_id(refuse_order_id);
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Map<String, Object> map2 = new HashMap<String, Object>();
		map2.put("batch_id", checkResult.getBatch_id());
		map2.put("date", sdf.format(sdf.parse(checkResult.getDate()+" 00:00:00")));
		map2.put("refuse_order_id", checkResult.getRefuse_order_id());
		JSONObject object = SignUtil.requestInterface(map2, "http://api.test.fenqichaoren.com/yueda/index/confirm");
		System.out.println(object);

		if(!object.getString("code").equals("200"))
		{	
			return;
			baseRespBean.setResult(ErrorCodeEnum.ADD_FAILED);
			baseRespBean.setResultNote("超人接口请求失败");
			return baseRespBean;
		}
    }*/
    
    
    /*@Test
    public  void test() throws NumberFormatException, Exception { 
    	operateOrderThread.aaaaa();

    }*/
    /*@Test
    public  void test() throws NumberFormatException, Exception { 
    	String uploadFilePath = "uploadFile/common/";// 文件服务器存储目录
		 
    	String filePath = session.getServletContext().getRealPath(uploadFilePath);
    	
		String toPath = "C:/Users/92947/Desktop/新建文件夹 (7)";
    	//获取翼支付文件目录 
    	List<String> fileList= FtpUtil.listSftpFile("112.74.126.48", "yipay", "fqcr-yipay", "22", "/file/ctpos/orange/upload/completed/");
    	FtpUtil.downloadSftpFile("112.74.126.48", "yipay", "fqcr-yipay", "22", "/file/ctpos/orange/upload/completed/", toPath,	fileList);
    
		List<String> fileList=new ArrayList<>();
		fileList.add("COMPLETED20171012CFQFQCR20180505.zip");
		fileList.add("COMPLETED20171012CFQFQCR20180512.zip");
		fileList.add("COMPLETED20171012CFQFQCR20180519.zip");
		fileList.add("COMPLETED20171012CFQFQCR20180531.zip");
		fileList.add("COMPLETED20171012CFQFQCR20180618.zip");
		fileList.add("COMPLETED20171012CFQFQCR20180622.zip");
		fileList.add("COMPLETED20171012CFQFQCR20180706.zip");
		fileList.add("COMPLETED20171012CFQFQCR20180707.zip");
		fileList.add("COMPLETED20171012CFQFQCR20180714.zip");
		fileList.add("COMPLETED20171012CFQFQCR20180809.zip");
		fileList.add("COMPLETED20171012CFQFQCR20180815.zip");
    	for (String string : fileList) {
    	  	 List<OrderInfoYi> orderInfoYis=  ThreeDes.decryptZip("20171012CFQFQCRcr0U30vV1", toPath,string);
    	  	 
    	  	 if(orderInfoYis==null||orderInfoYis.size()==0){
    	  		 continue;
    	  	 }
    	  	 try {
    	    	   orderInfoYiMapper.insertByList(orderInfoYis);
			} catch (Exception e) {
				// TODO: handle exception
			}

		}
  
    }*/
    @Test
    public  void test() throws Exception { List<Map<String, String>> list = new ArrayList<Map<String, String>>();
 
    int period = 24; // 分期期数
    BigDecimal crReqAmt = new BigDecimal(1365);// 申请金额
    BigDecimal money = paymentCalc(12, period, new BigDecimal(0.12),
            crReqAmt);// 每月应付
    BigDecimal principal = crReqAmt.divide(new BigDecimal(period), 2,
            BigDecimal.ROUND_HALF_UP);// 每月应还本金
    BigDecimal interest = money.subtract(principal);// 每月应还利息

    for (int i = 0; i < period; i++) {
        Map<String, String> tempMap = new HashMap<String, String>();
        String date = "2018-11-10";
   

        byte tempPeriod = (byte) (i + 1);
        if (i == period - 1) {
            // 最后一期 解决 本金四舍五入
            principal = crReqAmt.subtract(principal
                    .multiply(new BigDecimal(i)));
            interest = money.subtract(principal);
        }
        RepaymentPlanInfo repaymentPlanInfo = new RepaymentPlanInfo();

        repaymentPlanInfo.setStudentRepayStatus("0");
        repaymentPlanInfo.setSuperRepayStatus("0");
        repaymentPlanInfo.setPeriod(tempPeriod);
        repaymentPlanInfo.setCurrentRepayDate(ScfDateUtil.parseDate(date));
        repaymentPlanInfo.setCurrentPayableInterest(interest);
        repaymentPlanInfo.setCurrentPayablePrincipal(principal);
        repaymentPlanInfo.setRepaymentId(ScfUUID.generate());
       

        tempMap.put("current_payable_principal", principal.toString());
        tempMap.put("current_payable_interest", interest.toString());
        System.out.println("期数"+tempPeriod+"本金"+principal.toString()+"利息"+interest.toString());
        list.add(tempMap);
    }
     
    }
    
 /*   public void test() {
        System.out.println("strat");
        List<Map<String, Object>> results = projectDao.findProjectInfo(null);
        System.out.println("test:" + results.toString());
        System.out.println("end");
    }*/
}
