package com.ut.scf.service.test.tradfact;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.ut.scf.service.project.thread.OperateOrderThread;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = {
        "classpath*:spring-mybatis-test.xml"})
public class DictionaryTest {
/*    @Autowired
    private IDictionaryService dictionaryService;
    @Resource
    private ITfProjectDao projectDao;

    @Test
    public void loadAllDictTest() {
        System.out.println("strat");
        BaseRespBean loadAllDict = dictionaryService.loadAllDict();
        System.out.println("loadAllDict:" + loadAllDict);
        System.out.println("end");
    }
*/
    @Resource
    private OperateOrderThread operateOrderThread;
    public static double irr(double[] income) {
        return irr(income, 0.1D);
    }
 
    public static double irr(double[] values, double guess) {
        int maxIterationCount = 20;
        double absoluteAccuracy = 1.0E-007D;
 
        double x0 = guess;
 
        int i = 0;
        while (i < maxIterationCount) {
            double fValue = 0.0D;
            double fDerivative = 0.0D;
            for (int k = 0; k < values.length; k++) {
                fValue += values[k] / Math.pow(1.0D + x0, k);
                fDerivative += -k * values[k] / Math.pow(1.0D + x0, k + 1);
            }
            double x1 = x0 - fValue / fDerivative;
            if (Math.abs(x1 - x0) <= absoluteAccuracy) {
                return x1;
            }
            x0 = x1;
            i++;
        }
        return (0.0D / 0.0D);
    }
    
    
/*    @Test
    public  void test() { 
    	List<Map<String, String>> orderList = new ArrayList<Map<String, String>>();
        Map<String, String> a = new HashMap<String, String>();
        a.put("orderId", "12016090212340110084");
        a.put("peopleType", "1");
        orderList.add(a);
    	operateOrderThread.setStatusList(orderList);
    	try {
			operateOrderThread.aaaaa();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    Thread thread2 = new Thread(operateOrderThread);
    thread2.start();
    }*/
    
    @Test
    public  void test() { 
  /*  	List<Map<String, String>> orderList = new ArrayList<Map<String, String>>();
        Map<String, String> a = new HashMap<String, String>();
        a.put("orderId", "12016090212340110084");
        a.put("peopleType", "1");
        orderList.add(a);
    	operateOrderThread.setStatusList(orderList);*/
    	try {
			operateOrderThread.getRepaymentUserPlan("12016090212340110084","25",1);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
/*    Thread thread2 = new Thread(operateOrderThread);
    thread2.start();*/
    }
    /*@Test
    public  void test() {
        double[] income = {-18127.026,
			        		1824.852049,
			        		1801.01888,
			        		1787.295252,
			        		1773.571625,
			        		1759.847997,
			        		1746.12437,
			        		1732.400742,
			        		1718.677115,
			        		1704.953487,
			        		1691.22986,
			        		1677.506232
};
        double ret = irr(income,0.00001d) ;
        System.out.println(new BigDecimal(ret));
 
    }
    */
 /*   public void test() {
        System.out.println("strat");
        List<Map<String, Object>> results = projectDao.findProjectInfo(null);
        System.out.println("test:" + results.toString());
        System.out.println("end");
    }*/
}
