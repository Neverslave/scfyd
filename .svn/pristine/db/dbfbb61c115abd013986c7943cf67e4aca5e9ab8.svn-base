package com.ut.scf.web.controller.query;
import java.io.IOException;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ut.scf.core.dict.ErrorCodeEnum;
import com.ut.scf.core.dict.ScfConsts;
import com.ut.scf.dao.pub.IBusinessInfoDao;
import com.ut.scf.pojo.auto.BusinessTypeInfo;
import com.ut.scf.reqbean.query.ContractFileListReqBean;
import com.ut.scf.reqbean.query.ContractInfoListReqBean;
import com.ut.scf.reqbean.query.ContractInfoListReqBeanNew;
import com.ut.scf.reqbean.query.MainContractInfoListReqBean;
import com.ut.scf.respbean.BaseRespBean;
import com.ut.scf.respbean.PageRespBean;
import com.ut.scf.service.pub.IBusinessTypeInfoService;
import com.ut.scf.service.query.IContractQueryService;

@Controller
@RequestMapping("/contractInfo")
public class ContractQueryController {
    @Resource
	private IContractQueryService contractQueryService;
    
    @Resource
    private IBusinessTypeInfoService businessTypeInfoService;
    
    private Logger log = LoggerFactory.getLogger(this.getClass());
    
    @RequestMapping(value = "/list")
	public @ResponseBody BaseRespBean contractListInfo(
			@Valid @RequestBody ContractInfoListReqBean ContractInfoListReqBean)
			throws IOException {
		BaseRespBean respBean = contractQueryService
				.contractInfoList(ContractInfoListReqBean);

		return respBean;
	}

	@RequestMapping(value = "/fileList")
	public @ResponseBody BaseRespBean contractFileList(
			@Valid @RequestBody ContractFileListReqBean ContractFileListReqBean)
			throws IOException {
		BaseRespBean respBean = contractQueryService
				.contractInfoFileList(ContractFileListReqBean);

		return respBean;
	}

	/*-----------------------------查询统计新需求------------------------------*/
	@RequestMapping(value = "/listNew", method = RequestMethod.POST, consumes = { "application/json" }, produces = { "application/json;charset=UTF-8" })
	public @ResponseBody BaseRespBean getContractList(HttpSession httpSession,
			@Valid @RequestBody ContractInfoListReqBeanNew reqBean,
			BindingResult bindingResult)
			throws IOException {
		BaseRespBean respBean = new BaseRespBean();
		if (bindingResult.hasErrors()) {
			log.warn("bindingResult has error");
			respBean.setResult(ErrorCodeEnum.PARAM_VALID_ERROR);
			respBean.setResultErrorMap(bindingResult);
			return respBean;
		}
		
		String roleIdSession = (String) httpSession
				.getAttribute(ScfConsts.SESSION_ROLE_ID);
		String corpIdSession = (String) httpSession
				.getAttribute(ScfConsts.SESSION_CORP_ID);
		// 经销商
		if ("ROLE000020".equals(roleIdSession)) {
			reqBean.setCorpId(corpIdSession);
		}
		
		respBean = contractQueryService.getContractList(reqBean);

		return respBean;
	}
	
	//主合同表
	@RequestMapping(value = "/listMain", method = RequestMethod.POST, consumes = { "application/json" }, produces = { "application/json;charset=UTF-8" })
	public @ResponseBody BaseRespBean getMainContractList(HttpSession httpSession,
			@Valid @RequestBody MainContractInfoListReqBean reqBean,
			BindingResult bindingResult)
			throws IOException {
		BaseRespBean respBean = new BaseRespBean();
		if (bindingResult.hasErrors()) {
			log.warn("bindingResult has error");
			respBean.setResult(ErrorCodeEnum.PARAM_VALID_ERROR);
			respBean.setResultErrorMap(bindingResult);
			return respBean;
		}
		
		respBean = contractQueryService.getMainContractList(reqBean);

		return respBean;
	}
	
	//查询business type 表 
	@RequestMapping(value = "/getTypes")
	@ResponseBody
	public List<Map<String, Object>> getTypes(HttpSession httpSession) throws IOException {
		List<Map<String, Object>> businessInfos = businessTypeInfoService.getTypes();
		
		return businessInfos;
	}
	
	
	@RequestMapping(value = "/fileListNew", method = RequestMethod.POST, consumes = { "application/json" }, produces = { "application/json;charset=UTF-8" })
	public @ResponseBody BaseRespBean getContractFile(
			@Valid @RequestBody ContractInfoListReqBeanNew reqBean,
			BindingResult bindingResult)
			throws IOException {
		BaseRespBean respBean = new BaseRespBean();
		if (bindingResult.hasErrors()) {
			log.warn("bindingResult has error");
			respBean.setResult(ErrorCodeEnum.PARAM_VALID_ERROR);
			respBean.setResultErrorMap(bindingResult);
			return respBean;
		}
		
		respBean = contractQueryService.getContractFile(reqBean);

		return respBean;
	}
	
	//合同编号去重
	@ResponseBody
	@RequestMapping(value = "/isContractNumExit", method = RequestMethod.POST, consumes = { "application/json" }, produces = { "application/json;charset=UTF-8" })
	public  BaseRespBean isContractNumExit(HttpSession httpSession,String contractNum) {
		BaseRespBean respBean = new BaseRespBean();
		respBean = contractQueryService.isContractNumExit(contractNum);
		return respBean;
	}
	
	//融资涵规则去重
	@ResponseBody
	@RequestMapping(value = "/isRzhgzExit", method = RequestMethod.POST, consumes = { "application/json" }, produces = { "application/json;charset=UTF-8" })
	public  BaseRespBean isRzhgzExit(HttpSession httpSession,String rzhgz) {
		BaseRespBean respBean = new BaseRespBean();
			respBean = contractQueryService.isRzhgzExit(rzhgz);
		return respBean;
	}
	
	//付款涵规则去重
	@ResponseBody
	@RequestMapping(value = "/isFkhgzExit", method = RequestMethod.POST, consumes = { "application/json" }, produces = { "application/json;charset=UTF-8" })
	public  BaseRespBean isFkhgzExit(HttpSession httpSession,String fkhgz) {
		BaseRespBean respBean = new BaseRespBean();
			respBean = contractQueryService.isFkhgzExit(fkhgz);
		return respBean;
	}
}