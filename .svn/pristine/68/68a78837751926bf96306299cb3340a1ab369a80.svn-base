package com.ut.scf.web.controller.project;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.activiti.engine.impl.util.json.JSONObject;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ut.scf.core.dict.ErrorCodeEnum;
import com.ut.scf.core.dict.PageInfoBean;
import com.ut.scf.core.dict.ScfConsts;
import com.ut.scf.pojo.auto.OrderBatchInfo;
import com.ut.scf.pojo.auto.ProcessRepeatCheck;
import com.ut.scf.reqbean.project.OrderManagerReqBean;
import com.ut.scf.reqbean.project.OrderYcManagerReqBean;
import com.ut.scf.reqbean.pub.ActivitiDeleteProcessReqBean;
import com.ut.scf.respbean.BaseRespBean;
import com.ut.scf.service.project.IActivitiService;
import com.ut.scf.service.project.IOrderManagerService;
import com.ut.scf.service.project.IProcessRepeatChkService;
import com.ut.scf.web.controller.BaseJsonController;

/**
 * 订单管理
 * 
 * @author liwd
 *
 */
@Controller
@RequestMapping("/order")
public class OrderManagerController extends BaseJsonController {
	private static final Logger log = LoggerFactory
			.getLogger(OrderManagerController.class);

	@Resource
	private IActivitiService activitiService;
	@Resource
	private IOrderManagerService iOrderManagerService;

	@Resource
	private IProcessRepeatChkService processRepeatChkService;
	// 1.签署合同 并 发起流程
	@RequestMapping(value = "/startProcess")
	@ResponseBody
	public BaseRespBean startProcess(HttpSession httpSession) throws Exception {
		// 发起流程
		BaseRespBean respBean = new BaseRespBean();
		OrderManagerReqBean reqBean = new OrderManagerReqBean();
		// 获取当前用户

		String userName = (String) httpSession
				.getAttribute(ScfConsts.SESSION_USERNAME);
		reqBean.setOrderId("order_1,order_2");
		reqBean.setBatchId("batch_1");
		reqBean.setUserId(userName);
		reqBean.setActivitiKey("orderManagerProcess");
		JSONObject contactInfo = new JSONObject(reqBean);
		log.debug("corpInfoStr: {}", contactInfo);
		activitiService.startProcess(contactInfo);
		return respBean;
	}

	// 5.审核是否同意
	@RequestMapping(value = "/doAgree")
	@ResponseBody
	public BaseRespBean doAgree(HttpSession httpSession,
			@RequestBody OrderManagerReqBean reqBean) {
		BaseRespBean respBean = new BaseRespBean();
		// 获取当前用户
		String userName = (String) httpSession
				.getAttribute(ScfConsts.SESSION_USERNAME);
		reqBean.setUserId(userName);
		JSONObject jsonObject = new JSONObject(reqBean);
		respBean = activitiService.doAgree(jsonObject);
		return respBean;
	}
	
	
	// 5.审核是否同意
	@RequestMapping(value = "/start")
	@ResponseBody
	public BaseRespBean start(HttpSession httpSession,
			@RequestBody OrderManagerReqBean reqBean) {
		BaseRespBean respBean = new BaseRespBean();
		ProcessRepeatCheck checkInfo = new ProcessRepeatCheck();
		checkInfo.setProcessKey("orderManagerCheckProcess");
		checkInfo.setItemKey("ORDER_BATCH_ID");
		checkInfo.setItemValue(reqBean.getBatchId());
		if (processRepeatChkService.isProcessExist(checkInfo)) {
			respBean.setResult(ErrorCodeEnum.ORDER_BATCH_ID_EXIST);
			respBean.setResultNote("改批次的流程已经发起，不可重复，请确认");
			return respBean;
		}
		// 发起流程
		
		String userName = (String) httpSession.getAttribute(ScfConsts.SESSION_USERNAME);
		String roleId = (String) httpSession.getAttribute(ScfConsts.SESSION_ROLE_ID);
		reqBean.setUserId(userName);
		reqBean.setLaunchRoleId(roleId);
		reqBean.setActivitiKey("orderManagerCheckProcess");
		JSONObject contactInfo = new JSONObject(reqBean);
		try {
			respBean = iOrderManagerService.startProcess(contactInfo, httpSession,checkInfo);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return respBean;
	}
	/*@RequestMapping(value = "/start")
	@ResponseBody
	private BaseRespBean startOrderProcess(HttpSession httpSession,
			@RequestBody OrderManagerReqBean reqBean){
		BaseRespBean respBean = new BaseRespBean();
		
		ProcessRepeatCheck checkInfo = new ProcessRepeatCheck();
		checkInfo.setProcessKey("orderManagerCheckProcess");
		checkInfo.setItemKey("ORDER_BATCH_ID");
		checkInfo.setItemValue(reqBean.getBatchId());
		if (processRepeatChkService.isProcessExist(checkInfo)) {
			respBean.setResult(ErrorCodeEnum.ORDER_BATCH_ID_EXIST);
			return respBean;
		}
		// 发起流程
		
		String userName = (String) httpSession.getAttribute(ScfConsts.SESSION_USERNAME);
		String roleId = (String) httpSession.getAttribute(ScfConsts.SESSION_ROLE_ID);
		reqBean.setUserId(userName);
		reqBean.setLaunchRoleId(roleId);
		reqBean.setActivitiKey("orderManagerCheckProcess");
		JSONObject contactInfo = new JSONObject(reqBean);
		try {
			respBean = iOrderManagerService.startProcess(contactInfo, httpSession,checkInfo);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return respBean;
	}*/
	
	// 获取订单信息
	@RequestMapping(value = "/orderList")
	@ResponseBody
	public BaseRespBean orderList(HttpSession httpSession,
			@RequestBody OrderManagerReqBean reqBean) {
		Map<String, String> map = null;

		if (reqBean.getState() != null && reqBean.getOrderId() != null) {
			String[] status = reqBean.getState().split(",");
			String[] ids = reqBean.getOrderId().split(",");
			map = new HashMap<String, String>();
			for (int i = 0; i < status.length; i++) {
				map.put(ids[i], status[i]);
			}
		}
		return iOrderManagerService.orderInfoById(reqBean.getBatchId(),
				map);

	}
	// 获取订单信息
	@RequestMapping(value = "/orderListAll")
	@ResponseBody
	public BaseRespBean orderListAll(HttpSession httpSession,
			@RequestBody OrderManagerReqBean reqBean) {
	
		Map<String, String> map = null;

		if (reqBean.getState() != null && reqBean.getOrderId() != null) {
			String[] status = reqBean.getState().split(",");
			String[] ids = reqBean.getOrderId().split(",");
			map = new HashMap<String, String>();
			for (int i = 0; i < status.length; i++) {
				map.put(ids[i], status[i]);
			}
		}

		PageInfoBean page = new PageInfoBean();
		page.setPageNumber(reqBean.getPageNumber());
		page.setPageSize(reqBean.getPageSize());
		return iOrderManagerService.orderInfoByMap(reqBean,
				map,page);

	}
	// 获取订单信息
	@RequestMapping(value = "/orderListUnusual")
	@ResponseBody
	public BaseRespBean orderListUnusual(HttpSession httpSession,
			@RequestBody OrderYcManagerReqBean reqBean) {
		BaseRespBean respBean = new BaseRespBean();
		PageInfoBean page = new PageInfoBean();
		page.setPageNumber(reqBean.getPageNumber());
		page.setPageSize(reqBean.getPageSize());
		
		if ( reqBean.getOrderIdList() != null) {
			respBean= iOrderManagerService.orderInfoByList(reqBean.getOrderIdList(),page);
		}
	
		return respBean;
	}
	
	// 添加
	@RequestMapping(value = "/endProcess")
	@ResponseBody
	public BaseRespBean endProcess(HttpSession httpSession,
			@RequestBody OrderManagerReqBean reqBean) {
		BaseRespBean baseRespBean = null;

		try {
			// 获取当前用户
			String userName = (String) httpSession
					.getAttribute(ScfConsts.SESSION_USERNAME);
			reqBean.setUserId(userName);
			JSONObject jsonObject = new JSONObject(reqBean);
			baseRespBean = iOrderManagerService.endProcess(jsonObject, reqBean);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			baseRespBean = new BaseRespBean();
			baseRespBean.setResult(-1);
			baseRespBean.setResultNote("筛选订单失败，订单筛选异常");
			e.printStackTrace();
		}
		return baseRespBean;

	}
	// 添加
	@RequestMapping(value = "/unEndProcess")
	@ResponseBody
	public BaseRespBean unEndProcess(HttpSession httpSession,
			@RequestBody OrderYcManagerReqBean reqBean) {
		BaseRespBean baseRespBean = null;

		try {
			// 获取当前用户
			String userName = (String) httpSession
					.getAttribute(ScfConsts.SESSION_USERNAME);
			reqBean.setUserId(userName);
			JSONObject jsonObject = new JSONObject(reqBean);
			baseRespBean = iOrderManagerService.endProcess(jsonObject, reqBean);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			baseRespBean = new BaseRespBean();
			baseRespBean.setResult(-1);
			baseRespBean.setResultNote("筛选订单失败，订单筛选异常");
			e.printStackTrace();
		}
		return baseRespBean;

	}
	// 获取批次信息
	@RequestMapping(value = "/batchInfo")
	@ResponseBody
	public OrderBatchInfo batchInfoById(HttpSession httpSession,
			@RequestBody OrderManagerReqBean reqBean) {
		return iOrderManagerService.batchInfoById(reqBean.getBatchId());

	}

	// 生成还款计划
	@RequestMapping(value = "/plans")
	@ResponseBody
	public List<List<Map<String, Object>>> repayPlans(HttpSession httpSession,
			@RequestBody OrderManagerReqBean reqBean) throws Exception {
		// String[] strings = reqBean.getOrderId().split(",");
		return iOrderManagerService.getRepaymentPlans(reqBean.getOrderId());

	}
	@RequestMapping(value = "/deleteProcess", method = RequestMethod.POST, consumes = { "application/json" }, produces = { "application/json;charset=UTF-8" })
	public @ResponseBody BaseRespBean deleteProcess(HttpSession httpSession,
			@RequestBody ActivitiDeleteProcessReqBean reqBean,
			BindingResult bindingResult) {
		BaseRespBean respBean = new BaseRespBean();
		String procInstId = reqBean.getProcInstId();
		respBean = iOrderManagerService.deleteProcess(procInstId);
		return respBean;
	}
}
