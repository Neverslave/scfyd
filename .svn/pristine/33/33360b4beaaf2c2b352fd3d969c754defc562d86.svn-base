package com.ut.scf.web.controller.tradfact;

import java.io.IOException;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ut.scf.core.dict.PageInfoBean;
import com.ut.scf.core.dict.ScfConsts;
import com.ut.scf.core.util.BeanUtil;
import com.ut.scf.reqbean.ActivitiReqBean;
import com.ut.scf.reqbean.tradfact.ProjectSignReqBean;
import com.ut.scf.reqbean.tradfact.RiskManagerInfoBean;
import com.ut.scf.reqbean.tradfact.SignFlowReqBean;
import com.ut.scf.respbean.BaseRespBean;
import com.ut.scf.service.bpm.IActivitiService;
import com.ut.scf.service.tradfact.IProjectAdjustService;
import com.ut.scf.service.tradfact.IProjectSignService;
import com.ut.scf.web.controller.ActivitiController;

@Controller
@RequestMapping("/tradfact/sign")
public class ProjectSignController extends ActivitiController<SignFlowReqBean> {

	@Resource
	private IProjectAdjustService projectAdjustService;
	
	@Autowired
	private IProjectSignService projectSignService;

	@Resource(name = "projectSignBpmService")
	private IActivitiService activitiService;

	@RequestMapping(value = "/list")
	@ResponseBody
	public BaseRespBean projectSignList(@Valid @RequestBody ProjectSignReqBean reqBean, BindingResult bindingResult) throws IOException {
		Map<String, Object> paramMap = BeanUtil.beanToMap(reqBean);
		PageInfoBean page = new PageInfoBean();
		page.setPageNumber(reqBean.getPageNumber());
		page.setPageSize(reqBean.getPageSize());
		return projectSignService.projectSignList(paramMap, page);
	}

	@Override
	@RequestMapping(value = "/bpm/startProcess")
	@ResponseBody
	public BaseRespBean startProcess(@RequestBody SignFlowReqBean reqBean, HttpSession httpSession) {
		projectSignService.isExist(reqBean.getProjectId(), reqBean.getCreditContractNo());
		projectSignService.factoringNo(reqBean.getFactoringContractNo());

		Map<String, Object> paramMap = BeanUtil.beanToMap(reqBean);
		paramMap.put("projectStatus", 60);
		projectSignService.updateProjectStatus(paramMap);
		return super.startProcess(reqBean, httpSession);
	}
	
	@RequestMapping(value = "/bpm/auditProcess")
	@ResponseBody
	public BaseRespBean audit(@RequestBody SignFlowReqBean reqBean, HttpSession httpSession) {
		String roleIdSession = (String) httpSession
                .getAttribute(ScfConsts.SESSION_ROLE_ID);
		if("ROLE000014".equals(roleIdSession)){
			projectSignService.overdueWarningInfo("[" + reqBean.getProjectName() + "]项目签约合同文件已上传，以及项目基础交易合同已登记中登网，请领导审查，安排项目签约。");
		}
		return super.audit(reqBean, httpSession);
	}

	@Override
	@RequestMapping(value = "/bpm/reApply")
	@ResponseBody
	public BaseRespBean reApply(@RequestBody SignFlowReqBean reqBean, HttpSession httpSession) {
		projectSignService.isExist(reqBean.getProjectId(), reqBean.getCreditContractNo());
		projectSignService.factoringNo(reqBean.getFactoringContractNo());
		return super.reApply(reqBean, httpSession);

	}

	@Override
	@RequestMapping(value = "/bpm/deleteByProcInstId")
	@ResponseBody
	public BaseRespBean deleteByProcInstId(@RequestBody ActivitiReqBean reqBean) {
		return super.deleteByProcInstId(reqBean);
	}

	@Override
	protected IActivitiService getBpmProcessService() {
		return activitiService;
	}
	
}
