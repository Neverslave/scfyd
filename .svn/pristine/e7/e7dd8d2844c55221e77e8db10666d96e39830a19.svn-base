package com.ut.scf.service.test.tradfact;

import java.io.Console;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.ut.scf.core.dict.PageInfoBean;
import com.ut.scf.core.util.FtpUtil;
import com.ut.scf.core.util.ThreeDes;
import com.ut.scf.respbean.BaseRespBean;
import com.ut.scf.service.tradfact.impl.ProjectFileServiceImpl;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath:spring-mybatis-test.xml" })
public class projectFileTest {

	
	
/*    @Test
    public  void test(HttpSession httpSession) throws NumberFormatException, Exception { 
    	String uploadFilePath = "uploadFile/common/";// 文件服务器存储目录
		String toPath = httpSession.getServletContext().getRealPath(uploadFilePath);
    	//获取翼支付文件目录 
    	List<String> fileList= FtpUtil.listSftpFile("112.74.126.48", "yipay", "fqcr-yipay", "22", "/file/ctpos/orange/upload/completed/");
    	FtpUtil.downloadSftpFile("112.74.126.48", "yipay", "fqcr-yipay", "22", "/file/ctpos/orange/upload/completed/", toPath,	fileList);
    
    	   ThreeDes.decryptZip("20171012CFQFQCRcr0U30vV1", toPath,fileList);
    }*/
	
/*	@Autowired
	ProjectFileServiceImpl projectFileService;

	@Test
	public void testprojectFile() {
		Map<String, Object> paramMap = new HashMap<>();
		PageInfoBean page = new PageInfoBean();
		paramMap.put("projectId", "2c99849c5f5bc9534cd75bc9b4500001");
		page.setPageNumber(1);
		page.setPageSize(10);
		BaseRespBean selectProjectFile = projectFileService.selectProjectFile(paramMap);
		System.err.println(selectProjectFile);
	}

	@Test
	public void testSelectContractProjectFile() {
		Map<String, Object> paramMap = new HashMap<>();
		paramMap.put("projectId", "pro0001");
		BaseRespBean selectContractProjectFile = projectFileService.selectContractProjectFile(paramMap);
		System.err.println(selectContractProjectFile);
	}

	@Test
	public void testSelectLoanProjectFile() {
		Map<String, Object> paramMap = new HashMap<>();
		PageInfoBean page = new PageInfoBean();
		// paramMap.put("projectId", "pro0001");
		page.setPageNumber(1);
		page.setPageSize(10);
		BaseRespBean selectContractProjectFile = projectFileService.selectLoanProjectFile(paramMap, page);
		System.err.println(selectContractProjectFile);
	}*/
	
	@Test
	public void testSelectLoanProjectFile() throws ParseException {
		

		String maxPeopleType="20180430";
		Date dateBegin = new SimpleDateFormat("yyyyMMdd").parse(maxPeopleType);//定义起始日期
		Date dateEnd = new SimpleDateFormat("yyyyMMdd").parse(maxPeopleType);//定义起始日期
		Date dateRepayEnd = new SimpleDateFormat("yyyyMMdd").parse(maxPeopleType);//定义起始日期
		Calendar ca = Calendar.getInstance(); 
		ca.setTime(dateBegin);
		ca.add(Calendar.DATE, 1);
		
		dateBegin=ca.getTime();
		
		ca.add(Calendar.MONTH, 1);
		dateEnd=ca.getTime();
		ca.add(Calendar.MONTH, 1);
		ca.add(Calendar.DATE, -1);
		dateRepayEnd=ca.getTime();
		while (dateEnd.before(new Date())) {
			while (dateRepayEnd.before(new Date())) {
				
	/*			reqBean.setPorderDate(new SimpleDateFormat("yyyyMMdd").format(dateBegin));
				reqBean.setPorderDateEnd(new SimpleDateFormat("yyyyMMdd").format(dateEnd));
				reqBean.setPrepayDateEnd(new SimpleDateFormat("yyyyMMdd").format(dateRepayEnd));
				Map<String, Object> paramMap = BeanUtil.beanToMap(reqBean);
				ssmProjectSummaryDao.createWingRepaymentStaticList(paramMap);*/
				
				
				System.out.println(new SimpleDateFormat("yyyyMMdd").format(dateBegin)+";"+new SimpleDateFormat("yyyyMMdd").format(dateEnd)+";"+new SimpleDateFormat("yyyyMMdd").format(dateRepayEnd));

				Calendar ca2 = Calendar.getInstance(); 
				ca2.setTime(dateRepayEnd);
				ca2.add(Calendar.DATE, 1);
				ca2.add(Calendar.MONTH, 1);
				ca2.add(Calendar.DATE, -1);
				dateRepayEnd=ca2.getTime();
	
			}
			Calendar ca3 = Calendar.getInstance(); 
			ca3.setTime(dateEnd);
		
			dateBegin=ca3.getTime();
			ca3.add(Calendar.MONTH, 1);
			dateEnd=ca3.getTime();
			ca3.add(Calendar.MONTH, 1);
			ca3.add(Calendar.DATE, -1);
			dateRepayEnd=ca3.getTime();
		}

	
		


	}
}
