package com.ut.scf.service.project.thread;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.ut.scf.core.util.ScfUUID;
import com.ut.scf.core.util.SignUtil;
import com.ut.scf.dao.auto.FqcrGuaranteeInfoMapper;
import com.ut.scf.dao.auto.FqcrRepayInfoMapper;
import com.ut.scf.dao.auto.OrderBatchInfoMapper;
import com.ut.scf.dao.auto.OrderInfoMapper;
import com.ut.scf.dao.auto.RepaymentPlanInfoMapper;
import com.ut.scf.dao.auto.RepaymentPlanUserInfoMapper;
import com.ut.scf.dao.project.ISignContractDao;
import com.ut.scf.pojo.auto.FqcrGuaranteeInfo;
import com.ut.scf.pojo.auto.OrderBatchInfo;
import com.ut.scf.pojo.auto.OrderInfo;
import com.ut.scf.pojo.auto.OrderInfoExample;
import com.ut.scf.pojo.auto.RepaymentPlanInfo;
import com.ut.scf.pojo.auto.RepaymentPlanUserInfo;
import com.ut.scf.pojo.auto.RepaymentPlanUserInfoExample;
import com.ut.scf.service.project.ISSMHttpConnService;
import com.ut.scf.service.project.ISignContractService;

@Service("operateOrderThread")
public class OperateOrderThread implements Runnable {

	@Resource
	private ISSMHttpConnService issmHttpConnService;
	@Resource
	private ISignContractDao signContractDao;
	@Resource
	private RepaymentPlanInfoMapper repaymentPlanInfoMapper;
	@Resource
	private OrderInfoMapper orderInfoMapper;
    @Resource
	private ISignContractService iSignContractService;
    @Resource
    private FqcrGuaranteeInfoMapper fqcrGuaranteeInfoMapper;
	@Resource
	private OrderBatchInfoMapper orderBatchInfoMapper;
	@Resource
	private RepaymentPlanUserInfoMapper repaymentPlanUserInfoMapper;
	@Resource
	private FqcrRepayInfoMapper fqcrRepayInfoMapper;
	private List<Map<String, String>> checkList;
	
	private String batchId;
	private String peopleType;
	public void setCheckList(List<Map<String, String>> checkList) {
		this.checkList = checkList;
	}

	private List<Map<String, String>> statusList;

	public void setStatusList(List<Map<String, String>> statusList) {
		this.statusList = statusList;
	}

	@Override
	public void run() {
		try {
			
			Thread.sleep(1000*60*60);			 
		/*	getRepaymentPlan(statusList);*/
			try {
				updateOrderInfo();
			} catch (Exception e) {
				
			}
		
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			OrderBatchInfo batchInfo=new OrderBatchInfo();
			batchInfo.setStatus("10");//接口获取失败

			batchInfo.setBatchId(batchId);
	
			orderBatchInfoMapper.updateByPrimaryKeySelective(batchInfo);
		}
	}

	public void getRepaymentUserPlan(String orderId,String batchId,Integer peopleType) throws Exception{
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		RepaymentPlanUserInfoExample example=new RepaymentPlanUserInfoExample();
		com.ut.scf.pojo.auto.RepaymentPlanUserInfoExample.Criteria criteria =example.createCriteria();
		criteria.andOrderIdEqualTo(orderId);
		long count=repaymentPlanUserInfoMapper.countByExample(example);
		if(count==0){
			Map<String, Object> paramMap = new HashMap<String, Object>();
			paramMap.put("order_id", orderId);
			com.alibaba.fastjson.JSONObject jsonObject = SignUtil.requestInterface(paramMap, SignUtil.repaymentUserPlan);
			if(jsonObject.getString("code").equals("200"))
			{
				String  data=SignUtil.parseData(jsonObject.getString("data")); 
				System.out.println(data);
				com.alibaba.fastjson.JSONArray repaymentPlayJsonArray= com.alibaba.fastjson.JSONArray.parseArray(data);
				if(repaymentPlayJsonArray!=null&&repaymentPlayJsonArray.size()>0)
				{
					List<RepaymentPlanUserInfo> repaymentUsereList = new ArrayList<RepaymentPlanUserInfo>();
					for(int j=0 ;j<repaymentPlayJsonArray.size();j++)
					{
						com.alibaba.fastjson.JSONObject object=repaymentPlayJsonArray.getJSONObject(j);
						RepaymentPlanUserInfo repaymentPlanUserInfo=new RepaymentPlanUserInfo();
						repaymentPlanUserInfo.setId(ScfUUID.generate());
						repaymentPlanUserInfo.setBatchId(batchId);
						repaymentPlanUserInfo.setOrderId(orderId);
						repaymentPlanUserInfo.setPeopleId(peopleType);
						repaymentPlanUserInfo.setLoanTenor(object.getInteger("loan_tenor"));
						repaymentPlanUserInfo.setRepaymentPrice(StringUtils.isBlank(object.getString("repayment_price"))?null:(object.getBigDecimal("repayment_price")));
						repaymentPlanUserInfo.setCommission(StringUtils.isBlank(object.getString("commission"))?null:(object.getBigDecimal("commission")));
						repaymentPlanUserInfo.setInsurance(StringUtils.isBlank(object.getString("insurance"))?null:(object.getBigDecimal("insurance")));
						repaymentPlanUserInfo.setRepaymentDamages(StringUtils.isBlank(object.getString("repayment_damages"))?null:(object.getBigDecimal("repayment_damages")));
						String repayment_date = StringUtils.isBlank(object.getString("repayment_date"))?null:sdf.format(new Date(new Long(object.getString("repayment_date")+"000")));
						repaymentPlanUserInfo.setRepaymentDate(repayment_date);
						repaymentPlanUserInfo.setPaidPrice(StringUtils.isBlank(object.getString("paid_price"))?null:(object.getBigDecimal("paid_price")));
						repaymentPlanUserInfo.setPaidCommission(StringUtils.isBlank(object.getString("paid_commission"))?null:(object.getBigDecimal("paid_commission")));
						repaymentPlanUserInfo.setPaidInsurance(StringUtils.isBlank(object.getString("paid_insurance"))?null:(object.getBigDecimal("paid_insurance")));
						repaymentPlanUserInfo.setPaidDamages(StringUtils.isBlank(object.getString("paid_damages"))?null:(object.getBigDecimal("paid_damages")));
						String paid_date = StringUtils.isBlank(object.getString("paid_date"))?null:sdf.format(new Date(new Long(object.getString("paid_date")+"000")));
						repaymentPlanUserInfo.setPaidDate(paid_date);
						repaymentPlanUserInfo.setSystemtype(object.getInteger("systemtype"));
						repaymentPlanUserInfo.setRemark(object.getString("remark"));
						repaymentPlanUserInfo.setState(object.getInteger("state"));

						repaymentUsereList.add(repaymentPlanUserInfo);
					}
					int re=repaymentPlanUserInfoMapper.insertListRepayment(repaymentUsereList);
					
				}
			}
		}
	}
	
	
	
	
	public void getRepaymentPlan(List<Map<String, String>> statusList) throws Exception {
		// TODO Auto-generated method stub
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		if(statusList.size()>0){
			for(int i=0;i<statusList.size();i++){
				Map<String, String> map = statusList.get(i);
				String orderId = map.get("orderId"); 
				//判定还款计划表中是否存在这个订单号，如果有则视为已经存在还款计划表
				List<RepaymentPlanInfo> repayments = repaymentPlanInfoMapper.selectByOrderId(orderId);
				if (repayments == null || repayments.size()==0) {

					if (orderId != null || orderId != "") {
						//通过订单号，获取还款计划。
						Map<String, Object> paramMap = new HashMap<String, Object>();
						paramMap.put("order_id", orderId);
						JSONObject jsonObject = SignUtil.requestInterface(paramMap, SignUtil.repaymentPlan);
						/*JSONObject jsonObject = SignUtil.requestInterface(paramMap, SignUtil.userkhReplaymant);*/
						if(jsonObject.getString("code").equals("200"))
						{
							String  data=SignUtil.parseData(jsonObject.getString("data")); 
							System.out.println(data);
							JSONArray repaymentPlayJsonArray= JSONArray.parseArray(data);
							if(repaymentPlayJsonArray!=null&&repaymentPlayJsonArray.size()>0)
							{
								List<RepaymentPlanInfo> repaymentList = new ArrayList<RepaymentPlanInfo>();
								for(int j=0 ;j<repaymentPlayJsonArray.size();j++)
								{
									RepaymentPlanInfo repaymentPlanInfo=new RepaymentPlanInfo();
									com.alibaba.fastjson.JSONObject object=repaymentPlayJsonArray.getJSONObject(j);
									repaymentPlanInfo.setRepaymentId(ScfUUID.generate());
									repaymentPlanInfo.setOrderId(object.getString("order_id"));
									repaymentPlanInfo.setPeriod(StringUtils.isBlank(object.getString("current_period"))?null:(byte)object.getIntValue("current_period"));
									
									
									
									String date = (StringUtils.isBlank(object.getString("should_pay_time"))||object.getString("should_pay_time").equals("0"))?null:sdf.format(new Date(new Long(object.getString("should_pay_time")+"000")) );
									repaymentPlanInfo.setCurrentRepayDate(sdf.parse(date));
									repaymentPlanInfo.setInterest(StringUtils.isBlank(object.getString("interest"))?null:(new BigDecimal(object.getIntValue("interest")).divide(new BigDecimal(100))));
									repaymentPlanInfo.setLcMoney(StringUtils.isBlank(object.getString("lc_money"))?null:(new BigDecimal(object.getIntValue("lc_money")).divide(new BigDecimal(100))));
									repaymentPlanInfo.setCurrentMoney(StringUtils.isBlank(object.getString("current_money"))?null:(new BigDecimal(object.getIntValue("current_money")).divide(new BigDecimal(100))));
									repaymentPlanInfo.setEnsureMoney(StringUtils.isBlank(object.getString("ensure_money"))?null:(new BigDecimal(object.getIntValue("ensure_money")).divide(new BigDecimal(100))));
									String payed_time = (StringUtils.isBlank(object.getString("payed_time"))||object.getString("payed_time").equals("0"))?null:sdf.format(new Date(new Long(object.getString("payed_time")+"000")));
									repaymentPlanInfo.setPayedTime(payed_time);
									repaymentPlanInfo.setOrderBatchId(batchId);
									repaymentPlanInfo.setRepaymentMoney(StringUtils.isBlank(object.getString("repayment_money"))?null:(new BigDecimal(object.getIntValue("repayment_money")).divide(new BigDecimal(100))));
									repaymentPlanInfo.setPaidMoney(StringUtils.isBlank(object.getString("paid_money"))?null:(new BigDecimal(object.getIntValue("paid_money")).divide(new BigDecimal(100))));
									repaymentPlanInfo.setState(StringUtils.isBlank(object.getString("state"))?null:object.getIntValue("state"));
									repaymentPlanInfo.setMarketingFeeYi(StringUtils.isBlank(object.getString("marketing_fee_yi"))?null:(new BigDecimal(object.getIntValue("marketing_fee_yi")).divide(new BigDecimal(100))));
									repaymentPlanInfo.setServiceChargeYi(StringUtils.isBlank(object.getString("service_charge_yi"))?null:(new BigDecimal(object.getIntValue("service_charge_yi")).divide(new BigDecimal(100))));
									repaymentPlanInfo.setPeopleType( (byte) Integer.parseInt(map.get("peopleType")));
									
									repaymentList.add(repaymentPlanInfo);
								}
								int re=repaymentPlanInfoMapper.insertListRepayment(repaymentList);
								
								System.out.println(re);
							}
						}
					}
				}
				
			}
		}
	}

	public void updateOrderInfo() throws Exception{
				List<Map<String, String>> orderList = new ArrayList<Map<String, String>>();
			
				int page =1;
				int pagNum =100;
				boolean isTrue = true;
				 int orderNum=0;
				while(isTrue){
					Map<String, Object> map = new HashMap<String, Object>();
					map.put("batch_id", batchId);
					map.put("page", page);
					map.put("page_num", pagNum);
					com.alibaba.fastjson.JSONObject object = SignUtil.requestInterface(map, SignUtil.orderUrl);
					if(object.getString("code").equals("200")){
						//成功
						String data1 =object.getString("data");
						String dataString ="";
						try {
							dataString = SignUtil.parseData(data1);
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
							throw e;
						}
						com.alibaba.fastjson.JSONArray dataArray = JSON.parseArray(dataString);
						try {
						//更新订单状态
							OrderInfo orderInfo =new OrderInfo();
							for(int j=0 ;j<dataArray.size();j++)
							{
								com.alibaba.fastjson.JSONObject jsonObject=dataArray.getJSONObject(j);								
								orderInfo.setOrderId(jsonObject.getString("order_id"));
								if (jsonObject.getString("state").trim().equals("已确认")) {
									orderInfo.setState((byte)1);
								    
									Map<String, String> tempMap = new HashMap<String, String>();
			                        tempMap.put("orderId", orderInfo.getOrderId());
			                        tempMap.put("status",String.valueOf('1'));
			                        tempMap.put("peopleType",peopleType);
			                        orderList.add(tempMap);
								}
								else if (jsonObject.getString("state").trim().equals("已拒绝")) {
									orderInfo.setState((byte)0);
								}else {
									
									//orderInfo.setState((byte)0);
									throw new Exception("订单"+jsonObject.getString("order_id")+"审核状态异常"+jsonObject.getString("state"));
								
								}
								
								orderInfoMapper.updateByPrimaryKeySelective(orderInfo);
							}
							
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						
							throw e;
						}
						orderNum=orderNum+dataArray.size();
						if(dataArray.size()<pagNum){
							isTrue =false;
						}else{
							page++;
						}
						
					}else if(object.getString("code").equals("201")){
					
						isTrue =false;
					}else {
						throw new Exception(object.getString("errMsg"));
					}
				}
				//更新批次订单数量
				OrderBatchInfo batchInfo = new OrderBatchInfo();
				OrderInfoExample example=new OrderInfoExample();
				com.ut.scf.pojo.auto.OrderInfoExample.Criteria criteria=example.createCriteria();
				criteria.andBatchIdEqualTo(batchId);
				criteria.andStateIsNull();
				Map<String, Object> paramMap= new HashMap<String, Object>();
				paramMap.put("batchId", batchId);
				if(orderInfoMapper.countByExample(example)>0){
					batchInfo.setStatus("10");//接口获取失败，依旧存在空值
					throw  new Exception();
				}else{
					batchInfo.setStatus("1");
				
					Map<String, Object> resultMap=signContractDao.getRejOrderSum(paramMap);
					batchInfo.setRejOrderAmt(resultMap.get("sumNeedMoney")==null?new BigDecimal(0.00): new BigDecimal(resultMap.get("sumNeedMoney").toString()));
					batchInfo.setRejOrderNum(resultMap.get("sumCount")==null?0:Integer.valueOf(resultMap.get("sumCount").toString()));
					Map<String, Object> resultMapc=signContractDao.getRecOrderSum(paramMap);
					batchInfo.setRecOrderAmt(resultMapc.get("sumNeedMoney")==null?new BigDecimal(0.00):new BigDecimal(resultMapc.get("sumNeedMoney").toString()));
					batchInfo.setRecOrderNum(resultMapc.get("sumNeedMoney")==null?0:Integer.valueOf(resultMapc.get("sumCount").toString()));
				}
				batchInfo.setBatchId(batchId);
				batchInfo.setOrderTotalNum(orderNum);	
				orderBatchInfoMapper.updateByPrimaryKeySelective(batchInfo);
				
				
				if(batchInfo.getStatus().equals("1")){//已经审核过的，自动拉取还款计划表
					getRepaymentPlan(orderList);
					if(!peopleType.equals(3))
		    		{   //插入保证金
		    			double rate = iSignContractService.getGuaranteeRate("product02");
		    			//计算并插入保证金
		    			FqcrGuaranteeInfo fqcrGuaranteeInfo=new FqcrGuaranteeInfo();
		    			fqcrGuaranteeInfo.setBatchId(batchId);
		    			fqcrGuaranteeInfo.setGuaranteeMoneyRate(new BigDecimal(rate));
		    			fqcrGuaranteeInfo.setPayAbleGuarantee((batchInfo.getRecOrderAmt()).multiply(new BigDecimal(rate)).divide(new BigDecimal(100)));
		    			fqcrGuaranteeInfo.setPayActGuarantee(new BigDecimal(0));
		    			fqcrGuaranteeInfo.setGuaranteeBalance(new BigDecimal(0));
		    			
		    			int insertNum= fqcrGuaranteeInfoMapper.insertSelective(fqcrGuaranteeInfo);
		    			
		    		}
					
				}
	}

	public String getBatchId() {
		return batchId;
	}

	public void setBatchId(String batchId) {
		this.batchId = batchId;
	}

	public String getPeopleType() {
		return peopleType;
	}

	public void setPeopleType(String peopleType) {
		this.peopleType = peopleType;
	}
}
