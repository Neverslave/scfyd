package com.ut.scf.service.test.tradfact;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.alibaba.fastjson.JSONObject;
import com.ut.scf.core.dict.ErrorCodeEnum;
import com.ut.scf.core.util.SignUtil;
import com.ut.scf.pojo.auto.OrderCheckResult;
import com.ut.scf.service.project.thread.OperateOrderThread;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = {
        "classpath*:spring-mybatis-test.xml"})
public class DictionaryTest {
/*    @Autowired
    private IDictionaryService dictionaryService;
    @Resource
    private ITfProjectDao projectDao;

    @Test
    public void loadAllDictTest() {
        System.out.println("strat");
        BaseRespBean loadAllDict = dictionaryService.loadAllDict();
        System.out.println("loadAllDict:" + loadAllDict);
        System.out.println("end");
    }
*/
    @Resource
    private OperateOrderThread operateOrderThread;
    public static double irr(double[] income) {
        return irr(income, 0.1D);
    }
 
    public static double irr(double[] values, double guess) {
        int maxIterationCount = 20;
        double absoluteAccuracy = 1.0E-007D;
 
        double x0 = guess;
 
        int i = 0;
        while (i < maxIterationCount) {
            double fValue = 0.0D;
            double fDerivative = 0.0D;
            for (int k = 0; k < values.length; k++) {
                fValue += values[k] / Math.pow(1.0D + x0, k);
                fDerivative += -k * values[k] / Math.pow(1.0D + x0, k + 1);
            }
            double x1 = x0 - fValue / fDerivative;
            if (Math.abs(x1 - x0) <= absoluteAccuracy) {
                return x1;
            }
            x0 = x1;
            i++;
        }
        return (0.0D / 0.0D);
    }
    
    
/*    @Test
    public  void test() { 
    	List<Map<String, String>> orderList = new ArrayList<Map<String, String>>();
        Map<String, String> a = new HashMap<String, String>();
        a.put("orderId", "12016090212340110084");
        a.put("peopleType", "1");
        orderList.add(a);
    	operateOrderThread.setStatusList(orderList);
    	try {
			operateOrderThread.aaaaa();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    Thread thread2 = new Thread(operateOrderThread);
    thread2.start();
    }*/
    
    @Test
    public  void test() throws ParseException { 
    	ArrayList<String> refuse_order_id =new ArrayList<String> ();
    	refuse_order_id.add("220180809110679856694");
    	OrderCheckResult checkResult=new OrderCheckResult();		
		checkResult.setDate("2018-09-09");
		checkResult.setBatch_id("377");
		checkResult.setRefuse_order_id(refuse_order_id);
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Map<String, Object> map2 = new HashMap<String, Object>();
		map2.put("batch_id", checkResult.getBatch_id());
		map2.put("date", sdf.format(sdf.parse(checkResult.getDate()+" 00:00:00")));
		map2.put("refuse_order_id", checkResult.getRefuse_order_id());
		JSONObject object = SignUtil.requestInterface(map2, "http://api.test.fenqichaoren.com/yueda/index/confirm");
		System.out.println(object);

		if(!object.getString("code").equals("200"))
		{	
			return;
			/*baseRespBean.setResult(ErrorCodeEnum.ADD_FAILED);
			baseRespBean.setResultNote("超人接口请求失败");
			return baseRespBean;*/
		}
    }
    
    
    /*@Test
    public  void test() { 
    	List<Map<String, String>> orderList = new ArrayList<Map<String, String>>();
        Map<String, String> a = new HashMap<String, String>();
        a.put("orderId", "12016090212340110084");
        a.put("peopleType", "1");
        orderList.add(a);
    	operateOrderThread.setStatusList(orderList);
    	try {
    		operateOrderThread.setBatchId("739");
    		operateOrderThread.setPeopleType("3");
			operateOrderThread.getRepaymentUserPlan("12016090212340110084","25",1);
    		operateOrderThread.updateOrderInfo();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    Thread thread2 = new Thread(operateOrderThread);
    thread2.start();
    }*/
    /*@Test
    public  void test() {
        double[] income = {-18127.026,
			        		1824.852049,
			        		1801.01888,
			        		1787.295252,
			        		1773.571625,
			        		1759.847997,
			        		1746.12437,
			        		1732.400742,
			        		1718.677115,
			        		1704.953487,
			        		1691.22986,
			        		1677.506232
};
        double ret = irr(income,0.00001d) ;
        System.out.println(new BigDecimal(ret));
 
    }
    */
 /*   public void test() {
        System.out.println("strat");
        List<Map<String, Object>> results = projectDao.findProjectInfo(null);
        System.out.println("test:" + results.toString());
        System.out.println("end");
    }*/
}
